---
layout: page-with-sidebar
title:  "LC2300-二分"
date:   2023-11-10 16:08:03 +0800
author: reflectt6
categories: 
mainTag: "算法"
secondaryTag: "Middle"
---
## [2300. 咒语和药水的成功对数](https://leetcode.cn/problems/successful-pairs-of-spells-and-potions/)

给你两个正整数数组 `spells` 和 `potions` ，长度分别为 `n` 和 `m` ，其中 `spells[i]` 表示第 `i` 个咒语的能量强度，`potions[j]` 表示第 `j` 瓶药水的能量强度。

同时给你一个整数 `success` 。一个咒语和药水的能量强度 **相乘** 如果 **大于等于** `success` ，那么它们视为一对 **成功** 的组合。

请你返回一个长度为 `n` 的整数数组 `pairs`，其中 `pairs[i]` 是能跟第 `i` 个咒语成功组合的 **药水** 数目。



## 我的思路

使用两层for循环，会报超时，我通过

`long threshold = (success + (spells[i] -1)) / spells[i];`

优化了一下判断success的判断条件，这样不用每次都去做乘法，减少了一部分计算量，可是仍然超时。。

```java
public int[] successfulPairs(int[] spells, int[] potions, long success) {
        int n = spells.length;
        int m = potions.length;
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            int cnt = 0;
            long threshold = (success + (spells[i] -1)) / spells[i];
            for (int i1 = 0; i1 < m; i1++) {
                if (potions[i1] >= threshold) {
                    cnt++;
                }
            }
            res[i] = cnt;
        }
        return res;
    }
```

整不会了，感觉没法再优化了

## 题解

先排序，再二分查找

排序存在一定复杂度，而且二分查找也存在复杂度。考虑在最坏情况下，应该不比我直接两个for循环要快。可能是题目故意设置了这样的用例，就是考你这个知识点，那没办法，整吧。

Java中的排序非常简单，可以这样 `Arrays.sort()`

Java中的二分查找也非常简单，可以这样 `Arrays.binarySearch()`

但是如果你直接调用binarySearch是不行的，他找到的不一定是最左侧的值，举个例子, 数组如下：

```
1 3 3 4 5 6
```

```java
int[] a = new int[]{1,3,3,4,5,6};
int b = Arrays.binarySearch(a, 3);
System.out.println(b);
```

你会发现结果为2，也就是第二个3。而这道题我们要找的是最左侧的3，也就是下标为1的3，这里是一个坑。

所以工具虽好，但是不懂原理，还是没用。

下面是自己实现二分查找的代码

```java
public int[] successfulPairs2(int[] spells, int[] potions, long success) {
        int n = spells.length;
        int m = potions.length;
        int[] res = new int[n];
        Arrays.sort(potions);
        for (int i = 0; i < n; i++) {
            long threshold = (success + (spells[i] -1)) / spells[i];

          
            int l = 0, r = m - 1;
            while (l < r) {
                int mid = l + r >> 1;
              	// 条件中带等号，则最终找到的是最左侧的值,通过后面的讨论，二分法只能找最左侧的值
                if (potions[mid] >= threshold) r = mid;
                else l = mid + 1;
            }
            if (potions[r] >= threshold) res[i] = m - r;
        }
        return res;
    }
```

## 二分变式

#### 讨论

二分搜索真没那么简单，至少有以下几个点要考虑：

1、判断大小时，要不要带上等于号（带等号的意义在于，在值相同时，要不要找最左侧或者最右侧的值；否则可以直接返回）

2、由于计算除法用的是去一法，所以在 `while(l < r)`的条件下，`l + r >> 1`不可能等于右值，也就是mid != r。但是 `l 可以=mid`，所以不能让 `l = mid`去迭代，否则会陷入死循环。因此二分法不能在相同的值中找最右侧的值。

3、最终 `l` 和 `r`的关系，在 `while(l < r)`的条件下，最终要么`l = r`，要么 `l > r`。两种都有可能。但是由于法二无法正确实现， `l > r`的可能性也就消失了。。。

#### 法一：我想找最左侧的

实现代码同上，貌似是二分法相同值找最左侧的唯一解

```java
	int[] a = new int[]{1,3,3,4,5,6};
        int target = 3;
        int l = 0, r = a.length - 1;
        while (l < r) {
            int mid = l + r >> 1;
            // 条件中带等号，则最终找到的是最左侧的值
            if (a[mid] >= target) r = mid;
            else l = mid + 1;
        }
        if (a[r] == target) {
            System.out.println("找到了最左侧，下标为" + r);
        } else {
            System.out.println("没找到，如果要插入target的话，下标为" + (r + 1));
        }
```

这种算法循环结束时，right肯定是等于left的，所以看哪一个都行。

输出下标1。

还有一点要讨论，如果没找到，那么最终的坐标是在目标值的左侧还是右侧？

这种情况下，应该在目标值的右边（从左到右，从小到大排序），原因在于 `l=mid+1`会跳过目标值（目标值不存在在数组中时），让最终坐标位于目标值的右边。换句话说，目标值应该在最终坐标的左侧，如果要插入的话，插入的坐标应该为r+1；



#### 法二：我想找最右侧的3

代码要改动一下

```java
int[] a = new int[]{1,3,3,4,5,6};
int target = 3;
int l = 0;
int r = a.length - 1;
while (l <= r) {
    int mid = (l + r) >> 1;
    if (a[mid] <= target) l = mid + 1;
    else r = mid - 1;
}
if (a[r] == target) {
    System.out.println("找到了最右侧，下标为" + r);
} else {
    System.out.println("没找到, 如果要插入target的话，下标为" + r);
}
```

定理1：（left+right）/2的值一定是更靠近left的，因为计算机除法采用去1法

由定理1，可得以下推论：

当a[mid] <= target， left赋值mid+1，这时，left肯定是大于等于target的

当a[mid] > target，right赋值mid-1，这时，right肯定是大于等于target的

在循环结束时虽然，left和right都是大于等于target，但是right大于等于target是应该。

所以我们通过判断right位置的值是否等于target，

​	如果等于，那就是找到了，而且找到的是最右侧的那个3。

​	如果不等于，那就是没找到，而且此时的right就是我们要插入target的位置。
