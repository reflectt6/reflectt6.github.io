---
layout: page-without-sidebar
title:  "IntelliJ逆向"
date:   2024-07-23 9:08:03 +0800
author: reflectt6
categories: "Java逆向"
mainTag: "逆向即自由"
secondaryTag: "Java逆向"
hideTag: false
---
## 参考

[思路贴](https://linux.do/t/topic/469)

[gradle教程](https://docs.gradle.org/current/userguide/quick_start.html)

[Idea插件调试](https://www.jianshu.com/p/9054640a3088)

[RSA签名](https://www.xuzhengtong.com/2022/07/25/secure/RSA/)

[ja-netfilter power](https://www.xuzhengtong.com/2022/07/25/ja-netfilter/ja-netfilter-plugins-power/)



## 思路

- 找一个idea plugin了解License校验流程，例如这个[项目](https://github.com/JetBrains/marketplace-makemecoffee-plugin/tree/master)

  这个项目是gradle驱动的，很多报错我都束手无策。以后深入学习gradle之后可以再看看。

  有一个简单方式调试该项目，见[Idea插件调试](https://www.jianshu.com/p/9054640a3088)

  调试发现没办法调到license校验流程，自己实现一个简易版本

  ```java
  package org.example;
  
  import java.io.ByteArrayInputStream;
  import java.nio.charset.StandardCharsets;
  import java.security.Signature;
  import java.security.cert.*;
  import java.util.*;
  
  public class CheckCert {
      /**
       * Public root certificates needed to verify JetBrains-signed licenses
       */
      private static final String[] ROOT_CERTIFICATES = new String[]{
              "-----BEGIN CERTIFICATE-----\n" +
                      "MIIFOzCCAyOgAwIBAgIJANJssYOyg3nhMA0GCSqGSIb3DQEBCwUAMBgxFjAUBgNV\n" +
                      "BAMMDUpldFByb2ZpbGUgQ0EwHhcNMTUxMDAyMTEwMDU2WhcNNDUxMDI0MTEwMDU2\n" +
                      "WjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMIICIjANBgkqhkiG9w0BAQEFAAOC\n" +
                      "Ag8AMIICCgKCAgEA0tQuEA8784NabB1+T2XBhpB+2P1qjewHiSajAV8dfIeWJOYG\n" +
                      "y+ShXiuedj8rL8VCdU+yH7Ux/6IvTcT3nwM/E/3rjJIgLnbZNerFm15Eez+XpWBl\n" +
                      "m5fDBJhEGhPc89Y31GpTzW0vCLmhJ44XwvYPntWxYISUrqeR3zoUQrCEp1C6mXNX\n" +
                      "EpqIGIVbJ6JVa/YI+pwbfuP51o0ZtF2rzvgfPzKtkpYQ7m7KgA8g8ktRXyNrz8bo\n" +
                      "iwg7RRPeqs4uL/RK8d2KLpgLqcAB9WDpcEQzPWegbDrFO1F3z4UVNH6hrMfOLGVA\n" +
                      "xoiQhNFhZj6RumBXlPS0rmCOCkUkWrDr3l6Z3spUVgoeea+QdX682j6t7JnakaOw\n" +
                      "jzwY777SrZoi9mFFpLVhfb4haq4IWyKSHR3/0BlWXgcgI6w6LXm+V+ZgLVDON52F\n" +
                      "LcxnfftaBJz2yclEwBohq38rYEpb+28+JBvHJYqcZRaldHYLjjmb8XXvf2MyFeXr\n" +
                      "SopYkdzCvzmiEJAewrEbPUaTllogUQmnv7Rv9sZ9jfdJ/cEn8e7GSGjHIbnjV2ZM\n" +
                      "Q9vTpWjvsT/cqatbxzdBo/iEg5i9yohOC9aBfpIHPXFw+fEj7VLvktxZY6qThYXR\n" +
                      "Rus1WErPgxDzVpNp+4gXovAYOxsZak5oTV74ynv1aQ93HSndGkKUE/qA/JECAwEA\n" +
                      "AaOBhzCBhDAdBgNVHQ4EFgQUo562SGdCEjZBvW3gubSgUouX8bMwSAYDVR0jBEEw\n" +
                      "P4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2Zp\n" +
                      "bGUgQ0GCCQDSbLGDsoN54TAMBgNVHRMEBTADAQH/MAsGA1UdDwQEAwIBBjANBgkq\n" +
                      "hkiG9w0BAQsFAAOCAgEAjrPAZ4xC7sNiSSqh69s3KJD3Ti4etaxcrSnD7r9rJYpK\n" +
                      "BMviCKZRKFbLv+iaF5JK5QWuWdlgA37ol7mLeoF7aIA9b60Ag2OpgRICRG79QY7o\n" +
                      "uLviF/yRMqm6yno7NYkGLd61e5Huu+BfT459MWG9RVkG/DY0sGfkyTHJS5xrjBV6\n" +
                      "hjLG0lf3orwqOlqSNRmhvn9sMzwAP3ILLM5VJC5jNF1zAk0jrqKz64vuA8PLJZlL\n" +
                      "S9TZJIYwdesCGfnN2AETvzf3qxLcGTF038zKOHUMnjZuFW1ba/12fDK5GJ4i5y+n\n" +
                      "fDWVZVUDYOPUixEZ1cwzmf9Tx3hR8tRjMWQmHixcNC8XEkVfztID5XeHtDeQ+uPk\n" +
                      "X+jTDXbRb+77BP6n41briXhm57AwUI3TqqJFvoiFyx5JvVWG3ZqlVaeU/U9e0gxn\n" +
                      "8qyR+ZA3BGbtUSDDs8LDnE67URzK+L+q0F2BC758lSPNB2qsJeQ63bYyzf0du3wB\n" +
                      "/gb2+xJijAvscU3KgNpkxfGklvJD/oDUIqZQAnNcHe7QEf8iG2WqaMJIyXZlW3me\n" +
                      "0rn+cgvxHPt6N4EBh5GgNZR4l0eaFEV+fxVsydOQYo1RIyFMXtafFBqQl6DDxujl\n" +
                      "FeU3FZ+Bcp12t7dlM4E0/sS1XdL47CfGVj4Bp+/VbF862HmkAbd7shs7sDQkHbU=\n" +
                      "-----END CERTIFICATE-----\n",
              "-----BEGIN CERTIFICATE-----\n" +
                      "MIIFTDCCAzSgAwIBAgIJAMCrW9HV+hjZMA0GCSqGSIb3DQEBCwUAMB0xGzAZBgNV\n" +
                      "BAMMEkxpY2Vuc2UgU2VydmVycyBDQTAgFw0xNjEwMTIxNDMwNTRaGA8yMTE2MTIy\n" +
                      "NzE0MzA1NFowHTEbMBkGA1UEAwwSTGljZW5zZSBTZXJ2ZXJzIENBMIICIjANBgkq\n" +
                      "hkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAoT7LvHj3JKK2pgc5f02z+xEiJDcvlBi6\n" +
                      "fIwrg/504UaMx3xWXAE5CEPelFty+QPRJnTNnSxqKQQmg2s/5tMJpL9lzGwXaV7a\n" +
                      "rrcsEDbzV4el5mIXUnk77Bm/QVv48s63iQqUjVmvjQt9SWG2J7+h6X3ICRvF1sQB\n" +
                      "yeat/cO7tkpz1aXXbvbAws7/3dXLTgAZTAmBXWNEZHVUTcwSg2IziYxL8HRFOH0+\n" +
                      "GMBhHqa0ySmF1UTnTV4atIXrvjpABsoUvGxw+qOO2qnwe6ENEFWFz1a7pryVOHXg\n" +
                      "P+4JyPkI1hdAhAqT2kOKbTHvlXDMUaxAPlriOVw+vaIjIVlNHpBGhqTj1aqfJpLj\n" +
                      "qfDFcuqQSI4O1W5tVPRNFrjr74nDwLDZnOF+oSy4E1/WhL85FfP3IeQAIHdswNMJ\n" +
                      "y+RdkPZCfXzSUhBKRtiM+yjpIn5RBY+8z+9yeGocoxPf7l0or3YF4GUpud202zgy\n" +
                      "Y3sJqEsZksB750M0hx+vMMC9GD5nkzm9BykJS25hZOSsRNhX9InPWYYIi6mFm8QA\n" +
                      "2Dnv8wxAwt2tDNgqa0v/N8OxHglPcK/VO9kXrUBtwCIfZigO//N3hqzfRNbTv/ZO\n" +
                      "k9lArqGtcu1hSa78U4fuu7lIHi+u5rgXbB6HMVT3g5GQ1L9xxT1xad76k2EGEi3F\n" +
                      "9B+tSrvru70CAwEAAaOBjDCBiTAdBgNVHQ4EFgQUpsRiEz+uvh6TsQqurtwXMd4J\n" +
                      "8VEwTQYDVR0jBEYwRIAUpsRiEz+uvh6TsQqurtwXMd4J8VGhIaQfMB0xGzAZBgNV\n" +
                      "BAMMEkxpY2Vuc2UgU2VydmVycyBDQYIJAMCrW9HV+hjZMAwGA1UdEwQFMAMBAf8w\n" +
                      "CwYDVR0PBAQDAgEGMA0GCSqGSIb3DQEBCwUAA4ICAQCJ9+GQWvBS3zsgPB+1PCVc\n" +
                      "oG6FY87N6nb3ZgNTHrUMNYdo7FDeol2DSB4wh/6rsP9Z4FqVlpGkckB+QHCvqU+d\n" +
                      "rYPe6QWHIb1kE8ftTnwapj/ZaBtF80NWUfYBER/9c6To5moW63O7q6cmKgaGk6zv\n" +
                      "St2IhwNdTX0Q5cib9ytE4XROeVwPUn6RdU/+AVqSOspSMc1WQxkPVGRF7HPCoGhd\n" +
                      "vqebbYhpahiMWfClEuv1I37gJaRtsoNpx3f/jleoC/vDvXjAznfO497YTf/GgSM2\n" +
                      "LCnVtpPQQ2vQbOfTjaBYO2MpibQlYpbkbjkd5ZcO5U5PGrQpPFrWcylz7eUC3c05\n" +
                      "UVeygGIthsA/0hMCioYz4UjWTgi9NQLbhVkfmVQ5lCVxTotyBzoubh3FBz+wq2Qt\n" +
                      "iElsBrCMR7UwmIu79UYzmLGt3/gBdHxaImrT9SQ8uqzP5eit54LlGbvGekVdAL5l\n" +
                      "DFwPcSB1IKauXZvi1DwFGPeemcSAndy+Uoqw5XGRqE6jBxS7XVI7/4BSMDDRBz1u\n" +
                      "a+JMGZXS8yyYT+7HdsybfsZLvkVmc9zVSDI7/MjVPdk6h0sLn+vuPC1bIi5edoNy\n" +
                      "PdiG2uPH5eDO6INcisyPpLS4yFKliaO4Jjap7yzLU9pbItoWgCAYa2NpxuxHJ0tB\n" +
                      "7tlDFnvaRnQukqSG+VqNWg==\n" +
                      "-----END CERTIFICATE-----"
      };
  
      static String code = "XFL374P80P-eyJsaWNlbnNlSWQiOiJYRkwzNzRQODBQIiwibGljZW5zZWVOYW1lIjoiU2hhbmRvbmcgVW5pdmVyc2l0eSIsImFzc2lnbmVlTmFtZSI6IuS5kOS5kCDljasiLCJhc3NpZ25lZUVtYWlsIjoicHgyMjU4MTU1NzU3QHFxLmNvbSIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDIzLTA0LTE4In0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTgifSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjAyMy0wNC0xOCJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDIzLTA0LTE4In0seyJjb2RlIjoiUlNDIiwicGFpZFVwVG8iOiIyMDIzLTA0LTE4In0seyJjb2RlIjoiR08iLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTgifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAyMy0wNC0xOCJ9LHsiY29kZSI6IlJTRiIsInBhaWRVcFRvIjoiMjAyMy0wNC0xOCJ9LHsiY29kZSI6IkRTIiwicGFpZFVwVG8iOiIyMDIzLTA0LTE4In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTgifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAyMy0wNC0xOCJ9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDIzLTA0LTE4In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTgifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjAyMy0wNC0xOCJ9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAyMy0wNC0xOCJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDIzLTA0LTE4In0seyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTgifSx7ImNvZGUiOiJSU1YiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTgifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAyMy0wNC0xOCJ9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjAyMy0wNC0xOCJ9LHsiY29kZSI6IkRQIiwicGFpZFVwVG8iOiIyMDIzLTA0LTE4In0seyJjb2RlIjoiUERCIiwicGFpZFVwVG8iOiIyMDIzLTA0LTE4In0seyJjb2RlIjoiUFdTIiwicGFpZFVwVG8iOiIyMDIzLTA0LTE4In0seyJjb2RlIjoiUFNJIiwicGFpZFVwVG8iOiIyMDIzLTA0LTE4In0seyJjb2RlIjoiUFBTIiwicGFpZFVwVG8iOiIyMDIzLTA0LTE4In0seyJjb2RlIjoiUENXTVAiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTgifSx7ImNvZGUiOiJQR08iLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTgifSx7ImNvZGUiOiJQUEMiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTgifSx7ImNvZGUiOiJQUkIiLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTgifSx7ImNvZGUiOiJQU1ciLCJwYWlkVXBUbyI6IjIwMjMtMDQtMTgifSx7ImNvZGUiOiJSUyIsInBhaWRVcFRvIjoiMjAyMy0wNC0xOCJ9XSwiaGFzaCI6IjMzMjc1Mzc3LzE2MDE3NTkzOi0xNDk4Mzg4NDQ5IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-jty9QHc96Enja81sehWMIRLINR2sufZyzrlzLqm9Nvg7OG5ddEcSgiDb4XJblkOOrJgNz6l1eKW/lezzjkUdX53efMeuWm/Qx/sA9b4JVWs5704QZejETeqtb1b8blK6I0O127HCuhpyQbgU89G51D4pOnVwLaMt+nsM1xeBkm7LEd5RZVITJ6vx1CQa0xeFZe57R6BpY9r6rDw7v9nsSBjJI34goWgZ0V7d5MMOiohDf2xXo7Nvm6TKGJ51lfeMOVedETHzNEWZN/xRC+Xly6XZhzQAoGoNxpcUF660jjIVcG/HM+sb47JbEJheSfv6ma7Fx58ti+86TmTL9/iUVg==-MIIETDCCAjSgAwIBAgIBDzANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIyMTAxMDE2MDU0NFoXDTI0MTAxMTE2MDU0NFowHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMjEwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC/W3uCpU5M2y48rUR/3fFR6y4xj1nOm3rIuGp2brELVGzdgK2BezjnDXpAxVDw5657hBkAUMoyByiDs2MgmVi9IcqdAwpk988/Daaajq9xuU1of59jH9eQ9c3BmsEtdA4boN3VpenYKATwmpKYkJKVc07ZKoXL6kSyZuF7Jq7HoQZcclChbF75QJPGbri3cw9vDk/e46kuzfwpGftvl6+vKibpInO6Dv0ocwImDbOutyZC7E+BwpEm1TJZW4XovMBegHhWC04cJvpH1u98xoR94ichw0jKhdppywARe43rGU96163RckIuFmFDQKZV9SMUrwpQFu4Z2D5yTNqnlLRfAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQU5FZqQ4gnVc+inIeZF+o3ID+VhcEwSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBANLG1anEKid4W87vQkqWaQTkRtFKJ2GFtBeMhvLhIyM6Cg3FdQnMZr0qr9mlV0w289pf/+M14J7S7SgsfwxMJvFbw9gZlwHvhBl24N349GuthshGO9P9eKmNPgyTJzTtw6FedXrrHV99nC7spaY84e+DqfHGYOzMJDrg8xHDYLLHk5Q2z5TlrztXMbtLhjPKrc2+ZajFFshgE5eowfkutSYxeX8uA5czFNT1ZxmDwX1KIelbqhh6XkMQFJui8v8Eo396/sN3RAQSfvBd7Syhch2vlaMP4FAB11AlMKO2x/1hoKiHBU3oU3OKRTfoUTfy1uH3T+t03k1Qkr0dqgHLxiv6QU5WrarR9tx/dapqbsSmrYapmJ7S5+ghc4FTWxXJB1cjJRh3X+gwJIHjOVW+5ZVqXTG2s2Jwi2daDt6XYeigxgL2SlQpeL5kvXNCcuSJurJVcRZFYUkzVv85XfDauqGxYqaehPcK2TzmcXOUWPfxQxLJd2TrqSiO+mseqqkNTb3ZDiYS/ZqdQoGYIUwJqXo+EDgqlmuWUhkWwCkyo4rtTZeAj+nP00v3n8JmXtO30Fip+lxpfsVR3tO1hk4Vi2kmVjXyRkW2G7D7WAVt+91ahFoSeRWlKyb4KcvGvwUaa43fWLem2hyI4di2pZdr3fcYJ3xvL5ejL3m14bKsfoOv";
  
      public static void main(String[] args) {
          boolean res = checkCode();
          System.out.println(res);
      }
  
      public static boolean checkCode() {
          String[] licenseParts = code.split("-");
          if (licenseParts.length != 4) {
              return false; // invalid format
          }
  
          final String licenseId = licenseParts[0];
          final String licensePartBase64 = licenseParts[1];
          final String signatureBase64 = licenseParts[2];
          final String certBase64 = licenseParts[3];
  
          try {
              final Signature sig = Signature.getInstance("SHA1withRSA");
              // the last parameter of 'createCertificate()' set to 'false' switches off certificate expiration checks.
              // This might be the case if the key is at the same time a perpetual fallback license for older IDE versions.
              // Here it is only important that the key was signed with an authentic JetBrains certificate.
              sig.initVerify(createCertificate(
                      Base64.getMimeDecoder().decode(certBase64.getBytes(StandardCharsets.UTF_8)), Collections.emptySet(), false
              ));
              final byte[] licenseBytes = Base64.getMimeDecoder().decode(licensePartBase64.getBytes(StandardCharsets.UTF_8));
              sig.update(licenseBytes);
              if (!sig.verify(Base64.getMimeDecoder().decode(signatureBase64.getBytes(StandardCharsets.UTF_8)))) {
                  return false;
              }
              // Optional additional check: the licenseId corresponds to the licenseId encoded in the signed license data
              // The following is a 'least-effort' code. It would be more accurate to parse json and then find there the value of the attribute "licenseId"
              final String licenseData = new String(licenseBytes, StandardCharsets.UTF_8);
              return licenseData.contains("\"licenseId\":\"" + licenseId + "\"");
          } catch (Throwable e) {
              e.printStackTrace(); // For debug purposes only. Normally you will not want to print exception's trace to console
          }
          return false;
      }
  
      private static X509Certificate createCertificate(byte[] certBytes, Collection<byte[]> intermediateCertsBytes, boolean checkValidityAtCurrentDate) throws Exception {
          final CertificateFactory x509factory = CertificateFactory.getInstance("X.509");
          final X509Certificate cert = (X509Certificate) x509factory.generateCertificate(new ByteArrayInputStream(certBytes));
  
          final Collection<Certificate> allCerts = new HashSet<>();
          allCerts.add(cert);
          for (byte[] bytes : intermediateCertsBytes) {
              allCerts.add(x509factory.generateCertificate(new ByteArrayInputStream(bytes)));
          }
  
          try {
              // Create the selector that specifies the starting certificate
              final X509CertSelector selector = new X509CertSelector();
              selector.setCertificate(cert);
              // Configure the PKIX certificate builder algorithm parameters
              final Set<TrustAnchor> trustAchors = new HashSet<>();
              for (String rc : ROOT_CERTIFICATES) {
                  trustAchors.add(new TrustAnchor(
                          (X509Certificate) x509factory.generateCertificate(new ByteArrayInputStream(rc.getBytes(StandardCharsets.UTF_8))), null
                  ));
              }
  
              final PKIXBuilderParameters pkixParams = new PKIXBuilderParameters(trustAchors, selector);
              pkixParams.setRevocationEnabled(false);
              if (!checkValidityAtCurrentDate) {
                  // deliberately check validity on the start date of cert validity period, so that we do not depend on
                  // the actual moment when the check is performed
                  pkixParams.setDate(cert.getNotBefore());
              }
              pkixParams.addCertStore(
                      CertStore.getInstance("Collection", new CollectionCertStoreParameters(allCerts))
              );
              // Build and verify the certification chain
              final CertPath path = CertPathBuilder.getInstance("PKIX").build(pkixParams).getCertPath();
              if (path != null) {
                  CertPathValidator.getInstance("PKIX").validate(path, pkixParams);
                  return cert;
              }
          } catch (Exception e) {
              // debug the reason here
          }
          throw new Exception("Certificate used to sign the license is not signed by JetBrains root certificate");
      }
  }
  ```

  

- 



